# Generated from Exercise2.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,10,102,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,5,0,24,8,0,10,0,12,0,27,
        9,0,1,1,1,1,5,1,31,8,1,10,1,12,1,34,9,1,1,2,1,2,5,2,38,8,2,10,2,
        12,2,41,9,2,1,2,1,2,5,2,45,8,2,10,2,12,2,48,9,2,3,2,50,8,2,1,2,1,
        2,5,2,54,8,2,10,2,12,2,57,9,2,1,2,1,2,3,2,61,8,2,1,2,4,2,64,8,2,
        11,2,12,2,65,3,2,68,8,2,1,3,1,3,5,3,72,8,3,10,3,12,3,75,9,3,1,3,
        1,3,5,3,79,8,3,10,3,12,3,82,9,3,3,3,84,8,3,1,4,1,4,1,5,4,5,89,8,
        5,11,5,12,5,90,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,0,0,10,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,0,9,1,0,97,122,4,0,
        48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,69,69,101,101,2,
        0,43,43,45,45,1,0,48,49,4,0,37,37,42,43,45,45,47,47,3,0,9,10,13,
        13,32,32,114,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,1,21,1,0,0,0,3,28,1,0,0,0,5,67,1,0,0,0,7,83,1,0,0,0,9,85,
        1,0,0,0,11,88,1,0,0,0,13,94,1,0,0,0,15,96,1,0,0,0,17,98,1,0,0,0,
        19,100,1,0,0,0,21,25,7,0,0,0,22,24,7,1,0,0,23,22,1,0,0,0,24,27,1,
        0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,2,1,0,0,0,27,25,1,0,0,0,28,
        32,7,2,0,0,29,31,7,3,0,0,30,29,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,
        0,32,33,1,0,0,0,33,4,1,0,0,0,34,32,1,0,0,0,35,39,7,2,0,0,36,38,7,
        3,0,0,37,36,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,
        49,1,0,0,0,41,39,1,0,0,0,42,46,5,46,0,0,43,45,7,3,0,0,44,43,1,0,
        0,0,45,48,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,50,1,0,0,0,48,46,
        1,0,0,0,49,42,1,0,0,0,49,50,1,0,0,0,50,68,1,0,0,0,51,55,7,2,0,0,
        52,54,7,3,0,0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,
        0,0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,60,7,4,0,0,59,61,7,5,0,0,60,
        59,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,64,7,3,0,0,63,62,1,0,0,
        0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,68,1,0,0,0,67,35,
        1,0,0,0,67,51,1,0,0,0,68,6,1,0,0,0,69,73,5,48,0,0,70,72,7,6,0,0,
        71,70,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,84,1,
        0,0,0,75,73,1,0,0,0,76,80,5,49,0,0,77,79,7,6,0,0,78,77,1,0,0,0,79,
        82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,
        0,83,69,1,0,0,0,83,76,1,0,0,0,84,8,1,0,0,0,85,86,7,7,0,0,86,10,1,
        0,0,0,87,89,7,8,0,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,90,
        91,1,0,0,0,91,92,1,0,0,0,92,93,6,5,0,0,93,12,1,0,0,0,94,95,9,0,0,
        0,95,14,1,0,0,0,96,97,9,0,0,0,97,16,1,0,0,0,98,99,9,0,0,0,99,18,
        1,0,0,0,100,101,9,0,0,0,101,20,1,0,0,0,14,0,25,32,39,46,49,55,60,
        65,67,73,80,83,90,1,6,0,0
    ]

class BKIT_Exercise2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    INT = 2
    FLOAT = 3
    BINARY = 4
    OP = 5
    WS = 6
    ERROR_CHAR = 7
    UNCLOSE_STRING = 8
    ILLEGAL_ESCAPE = 9
    UNTERMINATED_COMMENT = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "BINARY", "OP", "WS", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE", "UNTERMINATED_COMMENT" ]

    ruleNames = [ "ID", "INT", "FLOAT", "BINARY", "OP", "WS", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "UNTERMINATED_COMMENT" ]

    grammarFileName = "Exercise2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        result = super().emit()
        if tk == self.UNCLOSE_STRING:       
            raise UncloseString(result.text)
        elif tk == self.ILLEGAL_ESCAPE:
            raise IllegalEscape(result.text) 
        elif tk == self.ERROR_CHAR:
            raise ErrorToken(result.text)
        elif tk == self.UNTERMINATED_COMMENT:
            raise UnterminatedComment()
        else:
            return result;


