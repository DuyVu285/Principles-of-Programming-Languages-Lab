# Generated from Exercise2.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,10,111,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,5,0,24,8,0,10,0,12,0,27,
        9,0,1,1,3,1,30,8,1,1,1,1,1,5,1,34,8,1,10,1,12,1,37,9,1,1,2,3,2,40,
        8,2,1,2,1,2,5,2,44,8,2,10,2,12,2,47,9,2,1,2,1,2,5,2,51,8,2,10,2,
        12,2,54,9,2,3,2,56,8,2,1,2,3,2,59,8,2,1,2,1,2,5,2,63,8,2,10,2,12,
        2,66,9,2,1,2,1,2,3,2,70,8,2,1,2,4,2,73,8,2,11,2,12,2,74,3,2,77,8,
        2,1,3,1,3,5,3,81,8,3,10,3,12,3,84,9,3,1,3,1,3,5,3,88,8,3,10,3,12,
        3,91,9,3,3,3,93,8,3,1,4,1,4,1,5,4,5,98,8,5,11,5,12,5,99,1,5,1,5,
        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,0,0,10,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,1,0,9,1,0,97,122,4,0,48,57,65,90,95,95,97,122,
        2,0,43,43,45,45,1,0,49,57,1,0,48,57,2,0,69,69,101,101,1,0,48,49,
        4,0,37,37,42,43,45,45,47,47,3,0,9,10,13,13,32,32,126,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,3,29,
        1,0,0,0,5,76,1,0,0,0,7,92,1,0,0,0,9,94,1,0,0,0,11,97,1,0,0,0,13,
        103,1,0,0,0,15,105,1,0,0,0,17,107,1,0,0,0,19,109,1,0,0,0,21,25,7,
        0,0,0,22,24,7,1,0,0,23,22,1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,
        26,1,0,0,0,26,2,1,0,0,0,27,25,1,0,0,0,28,30,7,2,0,0,29,28,1,0,0,
        0,29,30,1,0,0,0,30,31,1,0,0,0,31,35,7,3,0,0,32,34,7,4,0,0,33,32,
        1,0,0,0,34,37,1,0,0,0,35,33,1,0,0,0,35,36,1,0,0,0,36,4,1,0,0,0,37,
        35,1,0,0,0,38,40,7,2,0,0,39,38,1,0,0,0,39,40,1,0,0,0,40,41,1,0,0,
        0,41,45,7,3,0,0,42,44,7,4,0,0,43,42,1,0,0,0,44,47,1,0,0,0,45,43,
        1,0,0,0,45,46,1,0,0,0,46,55,1,0,0,0,47,45,1,0,0,0,48,52,5,46,0,0,
        49,51,7,4,0,0,50,49,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,
        0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,55,48,1,0,0,0,55,56,1,0,0,0,56,
        77,1,0,0,0,57,59,7,2,0,0,58,57,1,0,0,0,58,59,1,0,0,0,59,60,1,0,0,
        0,60,64,7,3,0,0,61,63,7,4,0,0,62,61,1,0,0,0,63,66,1,0,0,0,64,62,
        1,0,0,0,64,65,1,0,0,0,65,67,1,0,0,0,66,64,1,0,0,0,67,69,7,5,0,0,
        68,70,7,2,0,0,69,68,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,73,7,
        4,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,
        77,1,0,0,0,76,39,1,0,0,0,76,58,1,0,0,0,77,6,1,0,0,0,78,82,5,48,0,
        0,79,81,7,6,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,
        1,0,0,0,83,93,1,0,0,0,84,82,1,0,0,0,85,89,5,49,0,0,86,88,7,6,0,0,
        87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,93,1,
        0,0,0,91,89,1,0,0,0,92,78,1,0,0,0,92,85,1,0,0,0,93,8,1,0,0,0,94,
        95,7,7,0,0,95,10,1,0,0,0,96,98,7,8,0,0,97,96,1,0,0,0,98,99,1,0,0,
        0,99,97,1,0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,102,6,5,0,0,102,
        12,1,0,0,0,103,104,9,0,0,0,104,14,1,0,0,0,105,106,9,0,0,0,106,16,
        1,0,0,0,107,108,9,0,0,0,108,18,1,0,0,0,109,110,9,0,0,0,110,20,1,
        0,0,0,17,0,25,29,35,39,45,52,55,58,64,69,74,76,82,89,92,99,1,6,0,
        0
    ]

class Exercise2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    INT = 2
    FLOAT = 3
    BINARY = 4
    OP = 5
    WS = 6
    ERROR_CHAR = 7
    UNCLOSE_STRING = 8
    ILLEGAL_ESCAPE = 9
    UNTERMINATED_COMMENT = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "BINARY", "OP", "WS", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE", "UNTERMINATED_COMMENT" ]

    ruleNames = [ "ID", "INT", "FLOAT", "BINARY", "OP", "WS", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "UNTERMINATED_COMMENT" ]

    grammarFileName = "Exercise2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        result = super().emit()
        if tk == self.UNCLOSE_STRING:       
            raise UncloseString(result.text)
        elif tk == self.ILLEGAL_ESCAPE:
            raise IllegalEscape(result.text) 
        elif tk == self.ERROR_CHAR:
            raise ErrorToken(result.text)
        elif tk == self.UNTERMINATED_COMMENT:
            raise UnterminatedComment()
        else:
            return result;


